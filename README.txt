Описание:
	- Для решения задачи использовался Spring framework
	- Для хранения данных использвалась база данных MySql с фрейворком hybernate и Spring repositories
	- Класс 'Client' описывает клиента с его публичным и приватным ключом
	- Класс 'CaptchaTask' описывает CAPTCHA задание с его идентификатором, ответом и соответсвие конкретному клиенту. Метод 'getImage()' по запросу генерирует изображение по ответу на задание
	- Класс 'Token' описывает токен который выдается для верификации при верном решении CAPTCHA задания и описывется значением токена и соответсвием клиенту
	- Интерфейсы помеченные как 'Repository' описывают Spring CrudRepository для классов чьи обьекты будут храниться в базе данных и использоваться для обработки запросов
	- Класс ClientController является контроллером, который будет обрабатывать запрос на регистрацию клиета
	- Класс CaptchaController является контроллером, который будет обрабатывать все запросы связанные с получением идентификатора CAPTCHA задания, получением изображения задания, проверкой ответа от клиента и выдаче токена, в случае выполнения всех необходимых условий, и запросов по верификации токена
	- В случае нарушения каких либо условий запроса, будут отправляться соответвующие уведомления об ошибке 
	- При бросании исключений типа 'InconsistencyException' будет отправляться ответ со статусом ошибки 409 'CONFLICT'. В случаях несоответсвия CAPTCHA задания или токена верификации запрашивающему клиенту
	- При бросании исключений типа 'NotFoundException' будет отправляться ответ со статусом ошибки 404 'Not found'. В случаях отствия запрашиваемого клиента или CAPTCHA задания или токена верификации
	- При бросании исключений типа 'TimeOutException' будет отправляться ответ со статусом ошибки 408 'Request time out'. В случаях, когда время жизни CAPTCHA задания истекло
	- Системный параметр 'ttl' время жизни CAPTCHA теста в секундах
	- Класс 'CaptchaControllerTest' описывает модульные тесты покрывающие все возможные исходы при запросах обрабатываемых классом 'CaptchaController', кроме ошибок в названиях параметров запроса
	- Класс 'ClientControllerTest' описывает модульные тесты покрывающие все возможные исходы при запросах обрабатываемых классом 'ClientController', кроме ошибок в названиях параметров запроса

Предположения:
	- Так как значения принимаемые системным параметром 'production' не заданы в условии, я положил, что значение '0' будет соответвовать режиму тестирования, '1' будет соответсвать боевому режиму

Инструкции:
	- Архив содержит исходники как проект IntelliJ IDEA
	- Gриложение собирается c использованием Apache Maven
	- Приложения запускается с использованием Spring Boot
	- Необходима база данных MySql
	- В файле ресурсов 'application.properties' нужно указать ссылку на базу и параметры подключения, параметр 'spring.jpa.hibernate.ddl-auto' установленный как 'create' - будет пересоздовать базу с таблицами с каждым перезапуском приложения, 'none' - не будет производить манипуляций связанных с переформатированием таблиц